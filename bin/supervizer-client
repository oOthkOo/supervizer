#!/usr/bin/env node

const SPZ_SUCCESS_EXIT = 0;
const SPZ_ERROR_EXIT   = 1;

/**
 * Require all modules
 */
var common = require('../lib/common');
var main = require('../lib/main');
var path = require('path');
var Table = require('cli-table');
var commander = require('commander');
var request = require('request');
var color = require('cli-color');
var os = require('os');

/**
 * Setting all modules
 */

/**
 * Settings all global variables
 */
var serverHost = 'http://' + common.settings.host + ':' + common.settings.port + '/';

/**
 * All private functions
 */
function showError( message ) {
	console.log('\n\033[31m  [ERROR]: ' + message + '\x1B[39m\n');
}

function showHttpError( code ) {
	var message = '';
	switch (code) {
		case 500:
			message = '(Network:' + code + ') - Internal server error occured.';
			break;
		case 401:
			message = '(Auth:' + code + ') - Invalid username or password.';
			break;
		case 404:
			message = '(System:' + code + ') - Invalid command for this server.';
			break;
		case 700:
			message = '(Network:' + code + ') - Unable to connect to the server.';
			break;
		default:
			message = '(System:' + code + ') - An unknow error occured.';
			break;
	}	
	showError( message );
}

function showInfo( message ) {
	console.log('\n\033[32m  [INFO]: ' + message + '\x1B[39m\n');
}

function isQueryValid(error, response, body) {
	
	if (!response) {
		showHttpError( 700 );
		return null;
	}
	if (error || response.statusCode != 200) {
		showHttpError( response.statusCode );
		return null;
	}
	
	var query = body || false;
	if (!query) {
		showHttpError( 701 );
		return null;
	}
	
	if (query.result != common.results.SPZ_OK) {		
		showError( query.error );		
		return null;
	}	
	
	return query;
}

function getAppPattern() {	
	return {
		id: '',
		name: commander.name || '',
		group: commander.group || 'main',
		uid: commander.run ? commander.run.split(':')[0] : '',
		gid: commander.run ? commander.run.split(':')[1] : '',				
		script: commander.script || '',
		env: commander.env || '',
		params: commander.params || '',
		created: new Date().getTime(),
		started: '',
		watch: {
			enabled: commander.watch ? true : false,	
			path: commander.watch || '',
			excludes: commander.exclude ? commander.exclude.split(',') : []
		},
		timer: null,
		stopped: false,
		attempted: false,
		stdout: null,		
		files: {
			pid: commander.pid || '',
			log: commander.log || ''
		},
		host: commander.host || '',
		port: commander.port || '',
		pid: '',
		keep: commander.keep == 'yes' ? true : false,
		curAttempt: 0,
		attempt: commander.attempt || 3,		
		status: 'down',
		stats: {
			uptime: 0,
			started: 0,
			crashed: 0,
			stopped: 0,
			restarted: 0,
			memory: 0,
			cpu: 0
		}
	}
}

function getRequestParams( uri, data ) {
	return {
		url: serverHost + uri,
		headers: { 'Content-type': 'application/json' },
		body: data,
		json: true
	}
}

function listFormat( type, value ) {
	switch (type) {
		case 'script':
			return value ? path.basename(value) : 'N/C';
		case 'memory':
			return value ? getHumanBytes(value) : 'N/C';
		case 'uptime':
			return value > 0 ? getHumanPeriod(value) : 'N/C';
		case 'pid':
			return value || 'N/C';
		case 'host':
			return value ? value.replace('http://',''): 'N/C';
		case 'status':
			return value;
		case 'port':
			return value || 'N/C';
		case 'run':
			return value != ':' ? value : 'N/C';
		default:
			return value;
	}
	return '';
}

function showAppList( apps ) {
	
	if ( !apps || apps.length < 1 ) {
		showInfo( 'No apps found.');
		return;
	}
	
	var table = new Table({
	    head: [
	    	'id',
	    	'name',
	    	'pid',
	    	'user',
	    	'script',
	    	'group',
	    	'status',
	    	'host',
	    	'port',
	    	'uptime'],
	    colWidths: [5, 15, 8, 15, 15, 10, 8, 15, 9, 12]	    
	});
	
	for (var a=0; a<apps.length; a++) {
		var app = apps[a];
		table.push([
		     listFormat('id', app.id),
		     listFormat('name', app.name),
		     listFormat('pid', app.status == 'online' ? app.pid : null),
		     listFormat('run', app.uid + ':' + app.gid),
		     listFormat('script', app.script),
		     listFormat('group', app.group),
		     listFormat('status', app.status),
		     listFormat('host', app.host),
		     listFormat('port', app.port),
		     listFormat('uptime', app.status == 'online' ? app.started : null)
		]);
	}

	console.log(table.toString());
}

function getDateValue( timestamp ) {
	if (!timestamp || timestamp < 1) {
		return '';
	}	
	return main.formatDate(new Date(timestamp),"%Y-%m-%d %H:%M:%S",false);
}

function showAppProperties( app ) {

	console.log('[name           ]: ' + app.name);
	console.log('[group          ]: ' + app.group);
	console.log('[uid            ]: ' + (app.uid != '' ? app.uid : 'N/C' ) );
	console.log('[gid            ]: ' + (app.gid != '' ? app.gid : 'N/C' ) );
	console.log('[status         ]: ' + app.status);
	console.log('[host           ]: ' + app.host);
	console.log('[port           ]: ' + app.port);
	console.log('[created        ]: ' + getDateValue( app.created ));
	console.log('[started        ]: ' + getDateValue( app.started ));
	console.log('[pid            ]: ' + app.pid);
	console.log('[uptime         ]: ' + (app.started > 0 ? getHumanPeriod(app.started) : ''));
	console.log('[script         ]: ' + app.script);
	console.log('[params         ]: ' + app.params);
	console.log('[env            ]: ' + (app.env != '' ? app.env.join(',') : '' ) );
	console.log('[watch          ]: ' + (app.watch.enabled != '' ? 'yes' : 'no'));
	if (app.watch.enabled) {		
		console.log('[watch.path     ]: ' + app.watch.path);
		if (app.watch.excludes) {
			for (var e=0; e<app.watch.excludes.length; e++) {
				var exclude = app.watch.excludes[e];
				console.log('[watch.exclude-' + e + ']: ' + exclude);
			}
		}
	}
	console.log('[keep           ]: ' + (app.keep ? 'yes' : 'no'));
	if (app.keep) {		
		console.log('[keep.attempt   ]: ' + app.curAttempt);
		console.log('[keep.max       ]: ' + app.attempt);
	}	
	if (app.files) {
		console.log('[log.file       ]: ' + (app.files.log || 'N/C'));
		console.log('[pid.file       ]: ' + (app.files.pid || 'N/C'));
	}
	console.log('[stats.started  ]: ' + app.stats.started);
	console.log('[stats.crashed  ]: ' + app.stats.crashed);
	console.log('[stats.stopped  ]: ' + app.stats.stopped);
	console.log('[stats.restarted]: ' + app.stats.restarted);
	console.log('[stats.cpu      ]: ' + app.stats.cpu + ' %');
	console.log('[stats.memory   ]: ' + getHumanBytes(app.stats.memory));
}

function padding( text, count, char ) {	
	for (var i=0; i<count; i++) {
		text += char;
	}
	return text;
}

function getPercent( value, total, text, cleft, cright ) {
	
	text = padding( text, 8-text.length, ' ');	
	var percent = Math.round(Math.min((value / total) * 100,100) / 3.33);
	
	var gauge = '';
	for (var i=1; i<31; i++) {
		if (i <= percent) {
			gauge += cleft;			
		}
		else {
			gauge += cright;
		}
	}
	
	return '[' + gauge + '] ' + text;
}

function monitApp( stat ) {
	
	console.log('  '+stat.name);
	
	var cpu = getPercent(stat.cpu, 100, stat.cpu + ' %', color.bgRedBright(' '), color.bgBlack(' '));	
	var mem = getPercent(stat.mem, os.totalmem(), getHumanBytes(stat.mem), color.bgGreenBright(' '), color.bgBlack(' '));
	var pid = stat.pid != '' ?	stat.pid : 'N/C';
	
	console.log('    - CPU: ' + cpu + ' MEM: ' + mem + ' PID: ' + pid  );	
}

function monitAppList( stats ) {
	
	console.log(color.reset);
	
	process.stdout.write(color.moveTo(1,1));
	console.log(color.bold('[* Supervizer *] v' + common.pkg.version + ' - ' + stats.length + ' app(s).'));
	console.log();	
	for (var s=0; s<stats.length; s++) {
		monitApp( stats[s] );		
	}	
	console.log();
}

function getHumanBytes(bytes, precision) {
	//console.log('bytes', bytes)

	var kilobyte = 1024;
	var megabyte = kilobyte * 1024;
	var gigabyte = megabyte * 1024;
	var terabyte = gigabyte * 1024;

	if ((bytes >= 0) && (bytes < kilobyte)) {
		return bytes + ' B';
	}
	else if ((bytes >= kilobyte) && (bytes < megabyte)) {
	    return (bytes / kilobyte).toFixed(precision) + ' KB';
	}
	else if ((bytes >= megabyte) && (bytes < gigabyte)) {
	    return (bytes / megabyte).toFixed(precision) + ' MB';
	}
	else if ((bytes >= gigabyte) && (bytes < terabyte)) {
		return (bytes / gigabyte).toFixed(precision) + ' GB';
	}
	else if (bytes >= terabyte) {
		return (bytes / terabyte).toFixed(precision) + ' TB';
	}
	else {
	    return bytes + ' B';
	}
};

function getHumanPeriod( time ) {
	
	var second = 1000;
	var minute = 60000;
	var hour = 3600000;
	var day = 86400000;
	
	var curTime = new Date().getTime();
	var resultTime = Math.max(curTime - time,0);
	var d, h, m, s;
	var result = '';

	d = Math.round(resultTime / day);
	if (d > 0) {
		resultTime = resultTime % day;
	}
	h = Math.round(resultTime / hour);
	if (h > 0) {
		resultTime = resultTime % hour;
	}
	m = Math.round(resultTime / minute);
	if (m > 0) {
		resultTime = resultTime % minute;
	}
	s = Math.round(resultTime / second);	

	if (d > 0) {
		result += d + 'd ';
	}
	if (h > 0) {
		result += h + 'h ';
	}
	if (m > 0) {
		result += m + 'm ';
	}
	if (s > 0) { 
		result += s + 's';
	}

	return result;
};

function getCommandOptions() {
	var options = [];
	if (typeof commander.force != 'undefined') {
		options.push({ 
			force: commander.force
		});
	}
	if (typeof commander.name != 'undefined') {
		options.push({ 
			name: commander.name
		});
	}
	if (typeof commander.env != 'undefined') {
		options.push({ 
			env: commander.env
		});
	}
	if (typeof commander.params != 'undefined') {
		options.push({ 
			params: commander.params
		});
	}
	if (typeof commander.run != 'undefined') {
		options.push({ 
			run: {
				user: commander.run.split(':')[0],
				group: commander.run.split(':')[1]
			}
		});
	}
	if (typeof commander.group != 'undefined') {
		options.push({ 
			group: commander.group
		});
	}
	if (typeof commander.script != 'undefined') {
		options.push({ 
			script: commander.script
		});
	}
	if (typeof commander.log != 'undefined') {
		options.push({ 
			log: commander.log
		});
	}
	if (typeof commander.pid != 'undefined') {
		options.push({ 
			pid: commander.pid
		});
	}
	if (typeof commander.host != 'undefined') {
		options.push({ 
			host: commander.host
		});
	}
	if (typeof commander.keep != 'undefined') {
		options.push({ 
			keep: commander.keep == 'yes' ? true : false
		});
	}
	if (typeof commander.attempt != 'undefined') {
		options.push({ 
			attempt: commander.attempt
		});
	}
	if (typeof commander.watch != 'undefined') {
		options.push({ 
			watch: commander.watch			
		});
	}
	if (typeof commander.exclude != 'undefined') {
		options.push({ 
			excludes: commander.exclude.split(',')
		});
	}
	if (typeof commander.port != 'undefined') {
		options.push({ 
			port: commander.port
		});
	}
	if (typeof commander.auth != 'undefined') {
		options.push({ 
			auth: {
				user: commander.auth.split(':')[0],
				password: commander.auth.split(':')[1]
			}
		});
	}
	if (typeof commander.config != 'undefined') {
		options.push({ 
			config: commander.config
		});
	}
	return options;
}

/**
 * Setting all commands
 */
commander.version(common.pkg.version)
	.option('-v --verbose', 'display verbose data')
	.option('-f --force', 'force supervizer actions')
	.option('-n --name <string>', 'specify app name')
	.option('-z --env <string>', 'specify comma separated environment variables', function (value) {
  		return value.split(',')
  	})
	.option('-x --params <string>', 'specify node command line extra parameters')
	.option('-r --run <user:group>', 'specify user uid:gid to run app')
	.option('-g --group <string>', 'specify app group')
	.option('-s --script <path>', 'specify app main script')
	.option('-l --log <file>', 'specify app log output file')
	.option('-t --pid <file>', 'specify app pid file')
	.option('-k --keep <yes/no>', 'keep alive app (default:yes)')
	.option('-t --attempt <number>', 'max restart to keep alive (default:3)')
	.option('-w --watch <path>', 'specify path to watch')
	.option('-e --exclude <regex,regex>', 'specify regexes to exclude paths')
	.option('-h --host <address>', 'specify address to bind')
	.option('-p --port <port>', 'specify port to bind')
	.option('-a --auth <user:password>', 'specify user/password to use')
	.option('-c --config <file>', 'specify config file to load/save')
	.usage('[command] <options>');

commander.command('help <command>')
.description('print required/allowed options for each command.')
.action(function() {
	
});

commander.command('install')
.description('install supervizer as daemon')
.action(function() {
	
	if (process.getuid() != 0) {
		showError('You must run supervizer as root for this command.');
		process.exit(SPZ_ERROR_EXIT);
	}		
});

commander.command('uninstall')
	.description('uninstall supervizer as daemon')
	.action(function() {
		
		if (process.getuid() != 0) {
			showError('You must run supervizer as root for this command.');
			process.exit(SPZ_ERROR_EXIT);
		}		
});

commander.command('load')
	.description('load from a process configuration JSON file')
	.action(function() {
		
		var data = {
			file: commander.config || common.settings.apps
		}
		var params = getRequestParams( 'config/load', JSON.stringify(data) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('save')
	.description('save to a process configuration JSON file')
	.action(function() {
		
		var data = {
				file: commander.config || common.settings.apps
		}
		var params = getRequestParams( 'config/save', JSON.stringify(data) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('add')
	.description('add a node process')
	.action(function() {	
		
		var app = getAppPattern();		
		var params = getRequestParams( 'apps', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('remove')
	.description('remove a node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'apps', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.del( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});		
});

commander.command('start')
	.description('start a new node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'app/start', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('startAll')
	.description('start all node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'apps/start', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('stop')
	.description('stop a node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'app/stop', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('stopAll')
	.description('stop all node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'apps/stop', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('restart')
	.description('restart a node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'app/restart', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('restartAll')
	.description('restart all node process')
	.action(function() {
		
		var app = getAppPattern();		
		var params = getRequestParams( 'apps/restart', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});
});

commander.command('list')
	.description('list all node process')
	.action(function() {
		
	var app = getAppPattern();	
	var params = getRequestParams( 'apps/list', JSON.stringify(app) );
	
	//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
	
	request.post( params, function(error, response, body){
		//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
		
		var query = isQueryValid(error, response, body);
		if (!query) {
			process.exit(SPZ_ERROR_EXIT);
		}
		else {
			showAppList( query.data );
		}
		
	});
		
});

commander.command('monit')
	.description('monitor all node process')
	.action(function() {
		
		var app = getAppPattern();	
		var params = getRequestParams( 'apps/monit', JSON.stringify(app) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		var callback = function(){			
			request.post( params, function(error, response, body){
				//console.log( '[receive]:\n - data: ' + JSON.stringify(body));				
				var query = isQueryValid(error, response, body);
				if (!query) {
					process.exit(SPZ_ERROR_EXIT);
				}
				else {
					monitAppList( query.data );
				}				
			});			
		};
		
		callback();
		setInterval(callback, 1000);
});

commander.command('set <name>')
	.description('setting process property value')
	.action(function(name) {

		var data = {
				search: name,
				app: getAppPattern(),
				options: getCommandOptions()
		}		
		var params = getRequestParams( 'app', JSON.stringify(data) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.post( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showInfo(query.success);
			}
			
		});

});

commander.command('get <name>')
	.description('getting process properties values')
	.action(function(name,param) {
		
		var data = {
				search: name
		}		
		var params = getRequestParams( 'app', JSON.stringify(data) );
		
		//console.log( '[send]:\n' + ' - url: ' + params.url + '\n - data: ' + JSON.stringify(app) + '\n' );
		
		request.get( params, function(error, response, body){
			//console.log( '[receive]:\n - data: ' + JSON.stringify(body));
			
			var query = isQueryValid(error, response, body);
			if (!query) {
				process.exit(SPZ_ERROR_EXIT);
			}
			else {
				showAppProperties( query.data );
			}
			
		});
});


commander.command('*')
	.action(function() {
		showError('Command not found.');
		commander.outputHelp();
		process.exit(SPZ_ERROR_EXIT);
});

if (process.argv.length == 2) {
	commander.parse(process.argv);
	commander.outputHelp();
	process.exit(SPZ_ERROR_EXIT);
}

//console.log( 'process.argv.length: ' + process.argv.length );
commander.parse(process.argv);
