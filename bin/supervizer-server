#!/usr/bin/env node

var common = require('../lib/common')
var main = require('../lib/main')
var express = require('express')
var bodyParser = require('body-parser')
var server = express()

server.disable('x-powered-by')
server.use(bodyParser.json())

/**
 * API endpoints
 *
 * COMMANDs		VERBs		URIs				Descriptions
 *
 * 				GET   		/					Show server banner
 * load			POST		/config/load		Load all apps from file
 * save			POST		/config/save		Save all apps to file
 * add			PUT			/apps				Add an app to run
 * remove		DELETE		/apps				Stop and Remove an app
 * start		POST		/app/start			Start an app
 * startAll		POST		/apps/start			Start all apps
 * stop			POST		/app/stop			Stop an app
 * stopAll		POST		/apps/stop			Stop all apps
 * restart		POST		/app/restart		Restart an app
 * restartAll	POST		/apps/restart		Restart all apps
 * list			POST		/apps/list			Get app state list
 * monit		POST		/apps/monit			Monitor all apps
 * secure		POST		/secure				Enable/Disable authentication
 * enable		POST		/app/enable			Enable/Start an app
 * disable		POST		/app/disable		Disable/Stop an app
 * set			POST		/app				Set an app property
 * get			POST		/app				Get an app property
 */

function getResult (req) {
	req.body.ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress
	return req.body
}

/**
 * GET /
 */
server.get('/', (req, res) => {
	res.end('Supervizer server v' + common.pkg.version)
})

/**
 * GET /config/load
 */
server.post('/config/load', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /config/load\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.load(getResult(req))))
})

/**
 * POST /config/save
 */
server.post('/config/save', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /config/save\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.save(getResult(req))))
})

/**
 * PUT /apps
 */
server.put('/apps', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.add(getResult(req))))
})

/**
 * DELETE /apps
 */
server.delete('/apps', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.remove(getResult(req))))
})

/**
 * POST /app
 */
server.post('/app', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.set(getResult(req))))
})

/**
 * GET /app
 */
server.get('/app', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.get(getResult(req))))
})

/**
 * POST /app/start
 */
server.post('/app/start', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/start\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.start(getResult(req))))
})

/**
 * POST /apps/start
 */
server.post('/apps/start', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps/start\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.startAll(getResult(req))))
})

/**
 * POST /app/restart
 */
server.post('/app/restart', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/restart\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.restart(getResult(req))))
})

/**
 * POST /apps/restart
 */
server.post('/apps/restart', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps/restart\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.restartAll(getResult(req))))
})

/**
 * POST /app/stop
 */
server.post('/app/stop', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/stop\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.stop(getResult(req))))
})

/**
 * POST /apps/stop
 */
server.post('/apps/stop', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps/stop\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.stopAll(getResult(req))))
})

/**
 * POST /secure
 */
server.post('/secure', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /secure\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.secure(getResult(req))))
})

/**
 * POST /app/enable
 */
server.post('/app/enable', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/start\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.enable(getResult(req))))
})

/**
 * POST /apps/enable
 */
server.post('/apps/enable', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/start\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.enableAll(getResult(req))))
})

/**
 * POST /app/disable
 */
server.post('/app/disable', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/start\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.disable(getResult(req))))
})

/**
 * POST /apps/disable
 */
server.post('/apps/disable', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /app/start\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.disableAll(getResult(req))))
})

/**
 * POST /apps/list
 */
server.post('/apps/list', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps/list\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.list(getResult(req))))
})

/**
 * POST /apps/monit
 */
server.post('/apps/monit', (req, res) => {

	//console.log( '[request]:\n' + ' - path: /apps/monit\n - receive: ' + JSON.stringify(req.body) + '\n' )
	res.end(JSON.stringify(main.monit(getResult(req))))
})

server.all('*', (req, res) => {
  	res.status(404).send('NotFound Server Error')
})

server.use((err, req, res, next) => {
  	res.status(500).send('Internal Server Error')
  	main.showError('A fatal error occured')
	console.error(err.stack)
})

process.on('close', (code) => {
	main.showInfo('Supervizer server stopped')
})

server.listen(common.settings.port,common.settings.host)
main.showInfo('Supervizer Server (v' + common.pkg.version + ') started at (' + common.settings.host + ':' + common.settings.port + ')')
main.showInfo('Security authentication: ' + (common.settings.auth.enabled ? 'enabled' : 'disabled'))
